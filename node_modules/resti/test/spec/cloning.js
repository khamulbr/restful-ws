describe('resti', function() {
	var swapi;
	var swapiUrl = 'http://swapi.co/api';

	beforeEach(function() {
		swapi = new resti(swapiUrl);
	});

	afterEach(function() {
		resti.reset();
	});

	describe('when creating child resources', function() {

		describe('with one method', function() {

			it('should build correct url from a resource identifier and id', function() {
				var ship = swapi.one('starships', 10);
				expect(ship.url).toEqual('http://swapi.co/api/starships/10');
			});

			it('should build correct url when slashes and id are present', function() {
				var ship = swapi.one('/starships/', '/10/');
				expect(ship.url).toEqual('http://swapi.co/api/starships/10');
			});

			it('should build correct url when passed an absolute url', function() {
				var ship = swapi.one('http://swapi.co/api/starships/10');
				expect(ship.url).toEqual('http://swapi.co/api/starships/10');
			});

			it('should build correct url when trailing slashes are enabled', function() {
				resti.enableTrailingSlashes();
				var ship = swapi.one('/starships/', 10);
				expect(ship.url).toEqual('http://swapi.co/api/starships/10/');
			});

			describe('should have default', function() {

				it('accept header', function() {
					expect(swapi.headers['Accept']).toEqual('application/json');
				});

				it('content type header', function() {
					expect(swapi.headers['Content-Type']).toEqual('application/json');
				});

			});

		});

		describe('with many method', function() {

			it('should build correct url from a resource identifier', function() {
				var ships = swapi.many('starships');
				expect(ships.url).toEqual('http://swapi.co/api/starships');
			});

			it('should build correct url when slashes are present', function() {
				var ships = swapi.many('/starships/');
				expect(ships.url).toEqual('http://swapi.co/api/starships');
			});

			it('should build correct url when passed an absolute url', function() {
				var ship = swapi.one('http://swapi.co/api/starships/10');
				expect(ship.url).toEqual('http://swapi.co/api/starships/10');
			});

			describe('should have default', function() {

				it('accept header', function() {
					expect(swapi.headers['Accept']).toEqual('application/json');
				});

				it('content type header', function() {
					expect(swapi.headers['Content-Type']).toEqual('application/json');
				});

			});

		});

		describe('with endpoint method', function() {

			it('should build correct url', function() {
				var endpoint = swapi.one('starships', 10).endpoint('updateName');
				expect(endpoint.url).toEqual('http://swapi.co/api/starships/10/updateName');
			});

			it('should build correct url when slashes are present', function() {
				var endpoint = swapi.one('/starships/', 10).endpoint('/updateName/');
				expect(endpoint.url).toEqual('http://swapi.co/api/starships/10/updateName');
			});

			it('should build correct url when passed an absolute url', function() {
				var ship = swapi.one('http://swapi.co/api/starships/10');
				expect(ship.url).toEqual('http://swapi.co/api/starships/10');
			});

			describe('should have default', function() {

				it('accept header', function() {
					expect(swapi.headers['Accept']).toEqual('application/json');
				});

				it('content type header', function() {
					expect(swapi.headers['Content-Type']).toEqual('application/json');
				});

			});

		});

	});

});